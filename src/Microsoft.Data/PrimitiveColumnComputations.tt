<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="ColumnArithmeticTemplate.ttinclude" #>

// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

// Generated from PrimitiveColumnComputations.tt. Do not modify directly

using System;

namespace Microsoft.Data
{
    internal interface IPrimitiveColumnComputation<T>
        where T : struct
    {
<# foreach (MethodConfiguration compMethod in computationMethodConfiguration) { #>
<# if (compMethod.MethodType == MethodType.ElementwiseComputation && compMethod.HasReturnValue == false) {#>
        void <#=compMethod.MethodName#>(PrimitiveColumnContainer<T> column);
<# } else if (compMethod.MethodType == MethodType.ElementwiseComputation && compMethod.HasReturnValue == true) {#>
        void <#=compMethod.MethodName#>(PrimitiveColumnContainer<T> column, out T ret);
<# } else if (compMethod.MethodType == MethodType.Reduction && compMethod.IsNumeric == true) { #>
        void <#=compMethod.MethodName#>(PrimitiveColumnContainer<T> column, out T ret);
<# } else { #>
        void <#=compMethod.MethodName#>(PrimitiveColumnContainer<T> column, out bool ret);
<# } #>
<# } #>
    }

    internal static class PrimitiveColumnComputation<T>
        where T : struct
    {
        public static IPrimitiveColumnComputation<T> Instance => PrimitiveColumnComputation.GetComputation<T>();
    }

    internal static class PrimitiveColumnComputation
    {
        public static IPrimitiveColumnComputation<T> GetComputation<T>()
            where T : struct
        {
<# foreach (TypeConfiguration type in typeConfiguration) { #>
            <#=GenerateIfStatementHeader(type)#>
            {
                return (IPrimitiveColumnComputation<T>)new <#=type.ClassPrefix#>Computation();
            }
<# } #>
            throw new NotSupportedException();
        }
    }

<# foreach (TypeConfiguration type in typeConfiguration) { #>
    internal class <#=type.ClassPrefix#>Computation : IPrimitiveColumnComputation<<#=type.TypeName#>>
    {
<# foreach (MethodConfiguration method in computationMethodConfiguration) { #>
<# if (method.MethodType == MethodType.ElementwiseComputation && method.HasReturnValue == false) {#>
        public void <#=method.MethodName#>(PrimitiveColumnContainer<<#=type.TypeName#>> column)
<# } else if (method.MethodType == MethodType.ElementwiseComputation && method.HasReturnValue == true) {#>
        public void <#=method.MethodName#>(PrimitiveColumnContainer<<#=type.TypeName#>> column, out <#=type.TypeName#> ret)
<# } else if (method.MethodType == MethodType.Reduction && method.IsNumeric == true) { #>
        public void <#=method.MethodName#>(PrimitiveColumnContainer<<#=type.TypeName#>> column, out <#=type.TypeName#> ret)
<# } else { #>
        public void <#=method.MethodName#>(PrimitiveColumnContainer<<#=type.TypeName#>> column, out bool ret)
<# } #>
        {
<# if ((method.IsNumeric && !type.SupportsNumeric) || (method.IsBitwise && !type.SupportsBitwise) || (type.UnsupportedMethods.Contains(method.MethodName))) { #>
            throw new NotSupportedException();
<# } else { #>
<# if (method.MethodName == "Cummax" || method.MethodName == "Cummin" || method.MethodName == "Cumprod" || method.MethodName == "Cumsum" || method.MethodName == "Max" || method.MethodName == "Min" || method.MethodName == "Prod" || method.MethodName == "Sum") { #>

<# if (method.MethodName == "Cummax" || method.MethodName == "Cummin") { #>
            var ret = column.Buffers[0].Span[0];
<# } else if (method.MethodName == "Max" || method.MethodName == "Min") { #>
            ret = column.Buffers[0].Span[0];
<# } else if (method.MethodName == "Cumprod") { #>
            var ret = (<#=type.TypeName#>)1;
<# } else if (method.MethodName =="Prod") { #>
            ret = (<#=type.TypeName#>)1;
<# } else if (method.MethodName =="Cumsum") { #>
            var ret = (<#=type.TypeName#>)0;
<# } else { #>
            ret = (<#=type.TypeName#>)0;
<# } #>
            for (int bb = 0 ; bb < column.Buffers.Count; bb++)
            {
                var buffer = column.Buffers[bb];
                for (int i = 0; i < buffer.Length; i++)
                {
<# if (method.MethodName == "Cummax") { #>
                    ret = (<#=type.TypeName#>)(Math.Max(buffer.Span[i], ret));
                    buffer.Span[i] = ret;
<# } #>
<# if (method.MethodName == "Cummin") { #>
                    ret = (<#=type.TypeName#>)(Math.Min(buffer.Span[i], ret));
                    buffer.Span[i] = ret;
<# } #>
<# if (method.MethodName == "Cumprod") { #>
                    ret = (<#=type.TypeName#>)(buffer.Span[i] * ret);
                    buffer.Span[i] = ret;
<# } #>
<# if (method.MethodName == "Cumsum") { #>
                    ret = (<#=type.TypeName#>)(buffer.Span[i] + ret);
                    buffer.Span[i] = ret;
<# } #>
<# if (method.MethodName == "Max") { #>
                    ret = (<#=type.TypeName#>)(Math.Max(buffer.Span[i], ret));
<# } #>
<# if (method.MethodName == "Min") { #>
                    ret = (<#=type.TypeName#>)(Math.Min(buffer.Span[i], ret));
<# } #>
<# if (method.MethodName == "Prod") { #>
                    ret = (<#=type.TypeName#>)(buffer.Span[i] * ret);
<# } #>
<# if (method.MethodName == "Sum") { #>
                    ret = (<#=type.TypeName#>)(buffer.Span[i] + ret);
<# } #>
                }
            }
<# } else if (method.MethodType == MethodType.ElementwiseComputation && method.Operator != null) { #>
            for (int b = 0; b < column.Buffers.Count; b++)
            {
                var buffer = column.Buffers[b];
                for (int i = 0; i < buffer.Length; i++)
                {
                    buffer.Span[i] = (<#=type.TypeName#>)(<#=method.Operator#>((decimal)buffer.Span[i]));
                }
            }
<# } else if (method.MethodType == MethodType.Reduction) { #>
<# if (method.MethodName == "All") { #>
            ret = true;
<# } else if (method.MethodName == "Any") { #>
            ret = false;
<# } #>
            for (int b = 0; b < column.Buffers.Count; b++)
            {
                var buffer = column.Buffers[b];
                for (int i = 0; i < buffer.Length; i++)
                {
<# if (method.MethodName == "All") { #>
                    if (buffer.Span[i] == false)
                    {
                        ret = false;
                        break;
                    }
<# } else if (method.MethodName == "Any") { #>
                    if (buffer.Span[i] == true)
                    {
                        ret = true;
                        break;
                    }
<# } #>
                }
            }
<# } else { #>
            throw new NotImplementedException();
<# } #>
<# } #>
        }
<# } #>
    }
<# } #>
}
